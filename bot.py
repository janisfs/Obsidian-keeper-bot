from aiogram import Bot, Dispatcher, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from config import API_TOKEN
import asyncio
import os
from datetime import datetime
import logging
import sys
import aiohttp
from urllib.parse import urlparse
import hashlib
import re


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)


class MessageData:
    def __init__(self):
        self.title = ""
        self.text = ""
        self.urls = []
        self.image_links = []


# –ü—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
NOTES_DIR = r"C:\Users\janis\my_obsidian_stuff"
CACHE_DIR = os.path.join(NOTES_DIR, "Cache")
os.makedirs(NOTES_DIR, exist_ok=True)
os.makedirs(CACHE_DIR, exist_ok=True)


class NoteStates(StatesGroup):
    waiting_for_tags = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


def find_urls(text: str) -> list[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç URL –≤ —Ç–µ–∫—Å—Ç–µ"""
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    return re.findall(url_pattern, text)


def format_message_with_urls(text: str, urls: list[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è—è —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω–µ—Ü"""
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    formatted_text = text

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–æ–Ω–µ—Ü
    if urls:
        formatted_text += "\n\nüîó –°—Å—ã–ª–∫–∏:\n"
        for url in urls:
            parsed_url = urlparse(url)
            name = parsed_url.netloc
            formatted_text += f"- [{name}]({url})\n"

    return formatted_text


async def download_image(file: types.File) -> tuple[str, str]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏ –∏–º—è —Ñ–∞–π–ª–∞"""
    try:
        file_path = await bot.get_file(file.file_id)
        file_url = file_path.file_path
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file_url}")

        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.telegram.org/file/bot{API_TOKEN}/{file_url}") as response:
                if response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: —Å—Ç–∞—Ç—É—Å {response.status}")
                    raise Exception(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status}")
                
                content = await response.read()
                logger.info(f"–°–∫–∞—á–∞–Ω–æ {len(content)} –±–∞–π—Ç")
                
                file_hash = hashlib.md5(content).hexdigest()
                _, ext = os.path.splitext(file_url)
                if not ext:
                    ext = '.jpg'
                
                filename = f"{file_hash}{ext}"
                filepath = os.path.join(CACHE_DIR, filename)
                
                try:
                    with open(filepath, 'wb') as f:
                        f.write(content)
                    logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                    raise
                
                return filepath, filename
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise


def extract_title(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    lines = text.strip().split('\n')
    title = lines[0] if lines else "Untitled"
    return title.strip()


async def process_message(message: types.Message) -> MessageData:
    data = MessageData()
    text = message.text or message.caption or "Untitled"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏ code blocks –∏–∑ entities
    entities = message.entities or message.caption_entities or []
    telegram_links = []
    formatted_text = text
    
    for entity in entities:
        if entity.type in ["url", "text_link"]:
            if entity.type == "text_link":
                url = entity.url
            else:
                url = text[entity.offset:entity.offset + entity.length]
            telegram_links.append(("", url))
        elif entity.type == "code":
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥
            code = text[entity.offset:entity.offset + entity.length]
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è Obsidian —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
            code_block = f"\n```\n{code}\n```\n"
            # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
            formatted_text = formatted_text[:entity.offset] + code_block + formatted_text[entity.offset + entity.length:]
    
    data.text = formatted_text
    data.title = extract_title(text)
    
    if telegram_links:
        data.text += "\n\n## –°—Å—ã–ª–∫–∏:\n"
        for _, url in telegram_links:
            data.text += f"- {url}\n"
    
    if message.photo:
        photo = message.photo[-1]
        filepath, filename = await download_image(photo)
        relative_path = os.path.relpath(filepath, NOTES_DIR).replace('\\', '/')
        data.image_links.append(f"![[{relative_path}]]")
    
    return data



@dp.message()
async def handle_message(message: types.Message, state: FSMContext):
    try:
        current_state = await state.get_state()
        logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
        
        if current_state == NoteStates.waiting_for_tags.state:
            data = await state.get_data()
            note_text = data.get('note_text', '')
            image_links = data.get('image_links', [])
            
            if not note_text and not image_links:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –ø—É—Å—Ç–æ–π")
                await state.clear()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            tags = [tag.strip() for tag in message.text.split() if tag.strip().startswith('#')]
            obsidian_tags = [f"[[{tag.replace('#', '').capitalize()}]]" for tag in tags]
            
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title = extract_title(note_text)
            safe_title = "".join(c for c in title if c.isalnum() or c in (' ', '-', '_')).strip()
            filename = os.path.join(NOTES_DIR, f"{safe_title}.md")
            
            content = f"""tags: {' '.join(obsidian_tags)}
date: {datetime.now().strftime('%Y-%m-%d')}

{note_text}

{''.join(f'\n{link}' for link in image_links)}"""
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(content)

            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {filename}")
            await message.reply(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ '{safe_title}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            await state.clear()
            
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_data = await process_message(message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(
                note_text=message_data.text,
                image_links=message_data.image_links
            )
            
            await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: #—Ä–∞–±–æ—Ç–∞ #–∏–¥–µ–∏)")
            await state.set_state(NoteStates.waiting_for_tags)
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤...")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await state.clear()


async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)